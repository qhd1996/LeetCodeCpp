//Binary Search
//Time Complexity O(n)
//Space Complexity O(1)

//Solution1: STL
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        return lower_bound(nums.begin(), nums.end(), target) - nums.begin();
    }
};

//Solution2: lower_bound
//Binary Search
//Time Complexity O(n)
//Space Complexity O(1)

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        auto first = nums.begin(), last = nums.end();
        while(first < last){
            auto middle = first + ((last - first)>>1);
            if(*middle < target)
                first = middle + 1;
            else
                last = middle;
        }
        return first - nums.begin();
    }
};
